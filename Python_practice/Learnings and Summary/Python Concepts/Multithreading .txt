Notes made from Source: https://www.geeksforgeeks.org/python/multithreading-python-set-1/

Multithreading is a way of achieving multitasking. In multithreading, the concept of threads is used. 

What is a Process in Python?
In computing, a process is an instance of a computer program that is being executed. Any process has three-basic components:

1. An executable program
2. The assocaited data needed by the program(variables, workspace, buffers, etc).
3. The execution context of the program.

What is Thearding in Python?

A thread is a sequence of such instructions within a program that can be executed independently of other code. For simplicity, you can assume that a thread is simply a subset of a process. 

A thread contains all this information in a Thread Control Block(TCB) with the following parameters:


1. Thread Identifier.
2. Stack Pointer.
3. Program counter.
4. Thread state.
5. Therad's register set.
6. Parent process pointer contains Process Controll Block(PCB)

We can refer to diagram for more from the link.

Multiple threads acna exist in one process where:

1. Each thread contains it's own register set and local variables(stored in the stack).
2. All the threads of a process share global variables (stored in heap) and the programe code.

We can refer to diagram for more from the link for more context.

What is Multithreading?

It is defined as the ability of the process to execute multiple threads concurrently. Simply put, single-core CPU. it is achived using frequent swicthing between threads. This is termed as Context Switching.

In context switching, the state of a thread is saved and the state of another thread whicb is loaded whenever any interrupt (due to I/O or manually set) takes place. Context switching takes place so frequently that all the threads appear to be running parallelly (this is termed multitasking ).

Need to continue with the implementation of Multi-threading.

...




































Python3 implementation of multithreading:

import threading

def print_cube(num):
    print("Cube: {}" .format(num * num * num))


def print_square(num):
    print("Square: {}" .format(num * num))


if __name__ =="__main__":
    t1 = threading.Thread(target=print_square, args=(10,))
    t2 = threading.Thread(target=print_cube, args=(10,))

    t1.start()
    t2.start()

    t1.join()
    t2.join()

    print("Done!")
